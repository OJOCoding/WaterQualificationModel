{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOGyVYq5hPLaeTVwmSO+3Nw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Importing Data from Dataset.**"],"metadata":{"id":"Y6ruewiJnBls"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HZmHxHZxa1RB","executionInfo":{"status":"ok","timestamp":1679924496287,"user_tz":-180,"elapsed":25013,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"4b389be6-b451-4efc-c3bc-fd3016f49555"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive/\n","--------------------------------------------------------------------------------\n","Current dir:  /content/gdrive/My Drive/Colab Notebooks/Final_Project_ONILUCA\n","---------------------------------------- Contents ----------------------------------------\n","FinalProject_BASELINE\t  WATER_IMPROVED_DNN1  WATER_IMPROVED_DNN6\n","FinalProject_IMPROVEMENT  WATER_IMPROVED_DNN2  WATER_IMPROVED_DNN7\n","mllibrary\t\t  WATER_IMPROVED_DNN3  waterQuality1.csv\n","PAPER.docx\t\t  WATER_IMPROVED_DNN4\n","WATER_DNN1\t\t  WATER_IMPROVED_DNN5\n"]}],"source":["import os\n","from google.colab import drive\n","from google.colab import files\n","\n","drive.mount('/content/gdrive/')\n","print(\"-\"*80)\n","\n","\n","# Change to this source code folder\n","os.chdir(\"/content/gdrive/My Drive/Colab Notebooks/Final_Project_ONILUCA\")\n","print(\"Current dir: \", os.getcwd())\n","print(\"-\"*40, \"Contents\", \"-\"*40)\n","!ls \"/content/gdrive/My Drive/Colab Notebooks/Final_Project_ONILUCA\"\n"]},{"cell_type":"markdown","source":["# Creating **ANN**"],"metadata":{"id":"2e_GGOnqnWSp"}},{"cell_type":"code","source":["import os\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","import pandas as pd\n","import seaborn as sb\n","import json\n","from tensorflow import keras\n","from sklearn import preprocessing\n","from mllibrary.utils import RandomSeed\n","from mllibrary.visualization import CPlot, CPlotTrainingLogs, CPlotConfusionMatrix\n","from mllibrary.evaluation import CEvaluator\n","\n","\n","\n","# __________ | Settings | __________\n","IS_RETRAINING           = True\n","RandomSeed(2022)       "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XCh5rgCmnUjX","executionInfo":{"status":"ok","timestamp":1679924511589,"user_tz":-180,"elapsed":15310,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"bae8d0ac-f3e5-41c0-c321-c57c64a3e3b0"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Random seed set to 2022\n"]}]},{"cell_type":"code","source":["CONFIG_BASELINE = {\n","            \"ModelName\": \"WATER_DNN1\"  \n","           ,\"DNN.DropoutRate\": 0.5\n","           ,\"DNN.InputFeatures\": 20\n","           ,\"DNN.LayerNeurons\": [24, 32, 32, 1]\n","           ,\"DNN.Classes\": 1\n","           ,\"Training.MaxEpoch\": 100\n","           ,\"Training.BatchSize\": 200\n","           ,\"Training.LearningRate\": 0.001\n","          }\n","CONFIG = CONFIG_BASELINE "],"metadata":{"id":"vl7_QxJUc2z6","executionInfo":{"status":"ok","timestamp":1679924511590,"user_tz":-180,"elapsed":22,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Load the dataset into a pandas dataframe object and show header/first samples\n","oDF = pd.read_csv(\"waterQuality1.csv\", delimiter=\",\");\n","oDF.head()"],"metadata":{"id":"GxOxQ9AkxYvu","colab":{"base_uri":"https://localhost:8080/","height":236},"executionInfo":{"status":"ok","timestamp":1679924512011,"user_tz":-180,"elapsed":441,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"d58d5874-8481-4949-e46f-89d7919526fe"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   aluminium  ammonia  arsenic  barium  cadmium  chloramine  chromium  copper  \\\n","0       1.65     9.08     0.04    2.85    0.007        0.35      0.83    0.17   \n","1       2.32    21.16     0.01    3.31    0.002        5.28      0.68    0.66   \n","2       1.01    14.02     0.04    0.58    0.008        4.24      0.53    0.02   \n","3       1.36    11.33     0.04    2.96    0.001        7.23      0.03    1.66   \n","4       0.92    24.33     0.03    0.20    0.006        2.67      0.69    0.57   \n","\n","   flouride  bacteria  ...   lead  nitrates  nitrites  mercury  perchlorate  \\\n","0      0.05      0.20  ...  0.054     16.08      1.13    0.007        37.75   \n","1      0.90      0.65  ...  0.100      2.01      1.93    0.003        32.26   \n","2      0.99      0.05  ...  0.078     14.16      1.11    0.006        50.28   \n","3      1.08      0.71  ...  0.016      1.41      1.29    0.004         9.12   \n","4      0.61      0.13  ...  0.117      6.74      1.11    0.003        16.90   \n","\n","   radium  selenium  silver  uranium  is_safe  \n","0    6.78      0.08    0.34     0.02        1  \n","1    3.21      0.08    0.27     0.05        1  \n","2    7.07      0.07    0.44     0.01        0  \n","3    1.72      0.02    0.45     0.05        1  \n","4    2.41      0.02    0.06     0.02        1  \n","\n","[5 rows x 21 columns]"],"text/html":["\n","  <div id=\"df-c687b201-d47b-4526-a7de-3a077c340010\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>aluminium</th>\n","      <th>ammonia</th>\n","      <th>arsenic</th>\n","      <th>barium</th>\n","      <th>cadmium</th>\n","      <th>chloramine</th>\n","      <th>chromium</th>\n","      <th>copper</th>\n","      <th>flouride</th>\n","      <th>bacteria</th>\n","      <th>...</th>\n","      <th>lead</th>\n","      <th>nitrates</th>\n","      <th>nitrites</th>\n","      <th>mercury</th>\n","      <th>perchlorate</th>\n","      <th>radium</th>\n","      <th>selenium</th>\n","      <th>silver</th>\n","      <th>uranium</th>\n","      <th>is_safe</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.65</td>\n","      <td>9.08</td>\n","      <td>0.04</td>\n","      <td>2.85</td>\n","      <td>0.007</td>\n","      <td>0.35</td>\n","      <td>0.83</td>\n","      <td>0.17</td>\n","      <td>0.05</td>\n","      <td>0.20</td>\n","      <td>...</td>\n","      <td>0.054</td>\n","      <td>16.08</td>\n","      <td>1.13</td>\n","      <td>0.007</td>\n","      <td>37.75</td>\n","      <td>6.78</td>\n","      <td>0.08</td>\n","      <td>0.34</td>\n","      <td>0.02</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.32</td>\n","      <td>21.16</td>\n","      <td>0.01</td>\n","      <td>3.31</td>\n","      <td>0.002</td>\n","      <td>5.28</td>\n","      <td>0.68</td>\n","      <td>0.66</td>\n","      <td>0.90</td>\n","      <td>0.65</td>\n","      <td>...</td>\n","      <td>0.100</td>\n","      <td>2.01</td>\n","      <td>1.93</td>\n","      <td>0.003</td>\n","      <td>32.26</td>\n","      <td>3.21</td>\n","      <td>0.08</td>\n","      <td>0.27</td>\n","      <td>0.05</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.01</td>\n","      <td>14.02</td>\n","      <td>0.04</td>\n","      <td>0.58</td>\n","      <td>0.008</td>\n","      <td>4.24</td>\n","      <td>0.53</td>\n","      <td>0.02</td>\n","      <td>0.99</td>\n","      <td>0.05</td>\n","      <td>...</td>\n","      <td>0.078</td>\n","      <td>14.16</td>\n","      <td>1.11</td>\n","      <td>0.006</td>\n","      <td>50.28</td>\n","      <td>7.07</td>\n","      <td>0.07</td>\n","      <td>0.44</td>\n","      <td>0.01</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.36</td>\n","      <td>11.33</td>\n","      <td>0.04</td>\n","      <td>2.96</td>\n","      <td>0.001</td>\n","      <td>7.23</td>\n","      <td>0.03</td>\n","      <td>1.66</td>\n","      <td>1.08</td>\n","      <td>0.71</td>\n","      <td>...</td>\n","      <td>0.016</td>\n","      <td>1.41</td>\n","      <td>1.29</td>\n","      <td>0.004</td>\n","      <td>9.12</td>\n","      <td>1.72</td>\n","      <td>0.02</td>\n","      <td>0.45</td>\n","      <td>0.05</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.92</td>\n","      <td>24.33</td>\n","      <td>0.03</td>\n","      <td>0.20</td>\n","      <td>0.006</td>\n","      <td>2.67</td>\n","      <td>0.69</td>\n","      <td>0.57</td>\n","      <td>0.61</td>\n","      <td>0.13</td>\n","      <td>...</td>\n","      <td>0.117</td>\n","      <td>6.74</td>\n","      <td>1.11</td>\n","      <td>0.003</td>\n","      <td>16.90</td>\n","      <td>2.41</td>\n","      <td>0.02</td>\n","      <td>0.06</td>\n","      <td>0.02</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 21 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c687b201-d47b-4526-a7de-3a077c340010')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c687b201-d47b-4526-a7de-3a077c340010 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c687b201-d47b-4526-a7de-3a077c340010');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["oDF.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1byLEt93dP86","executionInfo":{"status":"ok","timestamp":1679924512012,"user_tz":-180,"elapsed":14,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"a5c9d8f5-4e5e-47bb-b3a0-427f3eb60128"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 7996 entries, 0 to 7995\n","Data columns (total 21 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   aluminium    7996 non-null   float64\n"," 1   ammonia      7996 non-null   float64\n"," 2   arsenic      7996 non-null   float64\n"," 3   barium       7996 non-null   float64\n"," 4   cadmium      7996 non-null   float64\n"," 5   chloramine   7996 non-null   float64\n"," 6   chromium     7996 non-null   float64\n"," 7   copper       7996 non-null   float64\n"," 8   flouride     7996 non-null   float64\n"," 9   bacteria     7996 non-null   float64\n"," 10  viruses      7996 non-null   float64\n"," 11  lead         7996 non-null   float64\n"," 12  nitrates     7996 non-null   float64\n"," 13  nitrites     7996 non-null   float64\n"," 14  mercury      7996 non-null   float64\n"," 15  perchlorate  7996 non-null   float64\n"," 16  radium       7996 non-null   float64\n"," 17  selenium     7996 non-null   float64\n"," 18  silver       7996 non-null   float64\n"," 19  uranium      7996 non-null   float64\n"," 20  is_safe      7996 non-null   int64  \n","dtypes: float64(20), int64(1)\n","memory usage: 1.3 MB\n"]}]},{"cell_type":"code","source":["print(oDF['is_safe'].value_counts())\n","print(\"-\"*80)\n","sb.countplot(oDF['is_safe'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":352},"id":"i65AM1DDdV2G","executionInfo":{"status":"ok","timestamp":1679924512694,"user_tz":-180,"elapsed":691,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"aeba1dfb-8443-4972-e756-1ad55c920d3e"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["0    7084\n","1     912\n","Name: is_safe, dtype: int64\n","--------------------------------------------------------------------------------\n"]},{"output_type":"execute_result","data":{"text/plain":["<Axes: ylabel='count'>"]},"metadata":{},"execution_count":6},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split    # import a standalone procedure function from the pacckage\n","from imblearn.over_sampling import SMOTE\n","\n","# ====================================================================================================\n","class CWaterDataset(object):\n","  # --------------------------------------------------------------------------------------\n","  # Constructor\n","  def __init__(self):\n","    # ................................................................\n","    # // Fields \\\\\n","    self.Samples   = None\n","    self.Labels    = None\n","    self.SampleCount = None\n","\n","    self.TSSamples = None\n","    self.TSLabels  = None\n","    self.TSSampleCount = 0\n","\n","    self.VSSamples = None\n","    self.VSLabels  = None\n","    self.VSSampleCount = 0\n","    # ................................................................\n","\n","  \n","    RandomSeed(2022)\n","  # --------------------------------------------------------------------------------------    \n","  def LoadFromFile(self, p_sFileName = \"waterQuality1.csv\"):\n","    oDF = pd.read_csv(p_sFileName, delimiter=\",\");\n","    nArray = oDF.to_numpy();\n","    print(\"Dataset shape:\", nArray.shape)\n","    self.Samples = nArray[:, :20]\n","    print(\"Features shape:\", self.Samples.shape)\n","    self.Labels = nArray[:,20]\n","    print(\"Labels shape:\", self.Labels.shape)\n","  # --------------------------------------------------------------------------------------\n","  def Split(self, p_nValidationSamplesPC=0.10):\n","    self.TSSamples, self.VSSamples, self.TSLabels, self.VSLabels = train_test_split(\n","                                                               self.Samples, self.Labels\n","                                                            , test_size=p_nValidationSamplesPC, random_state=2021)\n","        \n","    self.TSSampleCount = self.TSSamples.shape[0]\n","    self.VSSampleCount = self.VSSamples.shape[0]\n","    print(\"%d samples in the Training Set\" % self.TSSampleCount)\n","    print(\"%d samples in the Validation Set\"%  self.VSSampleCount)\n","    print('.'*80)\n","  # --------------------------------------------------------------------------------------\n","# ===================================================================================================="],"metadata":{"id":"yKo4_IUfo-Js","executionInfo":{"status":"ok","timestamp":1679924513605,"user_tz":-180,"elapsed":915,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["oDataset = CWaterDataset()\n","oDataset.LoadFromFile()\n","oStandardizer = preprocessing.StandardScaler()\n","oDataset.Samples = oStandardizer.fit(oDataset.Samples).transform(oDataset.Samples)\n","oDataset.Split(0.2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QmxUx_GWeC1a","executionInfo":{"status":"ok","timestamp":1679924514044,"user_tz":-180,"elapsed":445,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"0a3d9dc9-7daf-4204-f425-1bf8014221c8"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Random seed set to 2022\n","Dataset shape: (7996, 21)\n","Features shape: (7996, 20)\n","Labels shape: (7996,)\n","6396 samples in the Training Set\n","1600 samples in the Validation Set\n","................................................................................\n"]}]},{"cell_type":"code","source":["#from models.dnn import CDNNBasic\n","\n","from tensorflow import keras\n","from tensorflow.keras.layers import Dense, Dropout, BatchNormalization\n","from tensorflow.keras.layers import Activation, Softmax\n","\n","\n","# =========================================================================================================================\n","class CDNN(keras.Model):\n","    # --------------------------------------------------------------------------------------\n","    def __init__(self, p_oConfig):\n","        super(CDNN, self).__init__(p_oConfig)\n","\n","        # ..................... Object Attributes ...........................\n","        self.Config = p_oConfig\n","        self.ClassCount = self.Config[\"DNN.LayerNeurons\"][-1]\n","        self.IsRegression = (self.ClassCount == 0)\n","        self.LayerNeurons = self.Config[\"DNN.LayerNeurons\"][:-1]\n","        self.HiddenLayers = [None] * len(self.LayerNeurons)\n","        self.NormalizationLayers = [None] * len(self.LayerNeurons)\n","        self.DropOutLayer = None\n","        self.OutputLayer = None\n","        #self.SoftmaxActivation = None\n","        self.Classifier = None\n","        self.Input = None\n","        # ...................................................................\n","        if \"DNN.ActivationFunction\" not in self.Config:\n","            self.Config[\"DNN.ActivationFunction\"] = \"relu\"\n","\n","        if \"DNN.DropoutRate\" not in self.Config:\n","            self.IsDroppingOut = False\n","        else:\n","            self.IsDroppingOut = (self.Config[\"DNN.DropoutRate\"] != 0.0)\n","\n","        self.Create()\n","\n","    # --------------------------------------------------------------------------------------\n","    def Create(self):\n","        for nIndex, nLayerNeuronCount in enumerate(self.LayerNeurons):\n","            self.HiddenLayers[nIndex] = Dense(nLayerNeuronCount, activation=self.Config[\"DNN.ActivationFunction\"],\n","                                              use_bias=True)\n","            self.NormalizationLayers[nIndex] = BatchNormalization()\n","\n","        if self.IsDroppingOut:\n","            self.DropOutLayer = Dropout(self.Config[\"DNN.DropoutRate\"])\n","\n","        \n","        \n","        self.OutputLayer = Dense(self.ClassCount, use_bias=not self.IsRegression)\n","        if not self.IsRegression:\n","          if self.ClassCount == 1:\n","            self.Classifier = Activation(\"sigmoid\")\n","          else:\n","            self.Classifier = Softmax()\n","        # --------------------------------------------------------------------------------------\n","\n","    def call(self, p_tInput):\n","        self.Input = p_tInput\n","\n","        # Feed forward to the next layer\n","        tA = p_tInput\n","        for nIndex, oHiddenLayer in enumerate(self.HiddenLayers):\n","            oNormalizationLayer = self.NormalizationLayers[nIndex]\n","            tA = oHiddenLayer(tA)\n","            tA = oNormalizationLayer(tA)\n","        if self.IsDroppingOut:\n","            tA = self.DropOutLayer(tA)\n","        tA = self.OutputLayer(tA)\n","        # Using the Softmax activation function for the neurons of the output layer\n","        if not self.IsRegression:\n","          tA = self.Classifier(tA)\n","\n","\n","        return tA\n","        # --------------------------------------------------------------------------------------\n","# ========================================================================================================================="],"metadata":{"id":"4ixFmLGGeJ6b","executionInfo":{"status":"ok","timestamp":1679924514046,"user_tz":-180,"elapsed":13,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# __________ // Create the Machine Learning model and training algorithm objects \\\\ __________\n","sModelFolderName = CONFIG[\"ModelName\"]\n","nInitialLearningRate = CONFIG[\"Training.LearningRate\"]\n","\n","oDNN = CDNN(CONFIG)\n","\n","oCostFunction   = tf.keras.losses.BinaryCrossentropy(from_logits=False)  #tf.keras.losses.CategoricalCrossentropy(from_logits=False)\n","oOptimizer      = tf.keras.optimizers.SGD(learning_rate=nInitialLearningRate)"],"metadata":{"id":"GVQQoCXTeUDr","executionInfo":{"status":"ok","timestamp":1679924514047,"user_tz":-180,"elapsed":13,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["nBatchSize = CONFIG[\"Training.BatchSize\"]\n","\n","# Creating one hot labels if the task is multiclass, or we have 2 software neurons for binary classification\n","#tTSTargets = tf.one_hot(oDataset.TSLabels, CONFIG[\"DNN.Classes\"])\n","#tVSTargets = tf.one_hot(oDataset.VSLabels, CONFIG[\"DNN.Classes\"])\n","\n","# Training data feed pipeline\n","oTSData = tf.data.Dataset.from_tensor_slices((oDataset.TSSamples, oDataset.TSLabels))\n","oTSData = oTSData.cache()\n","oTSData = oTSData.shuffle(oDataset.TSSampleCount)\n","oTSData = oTSData.batch(nBatchSize)\n","print(\"Training data object:\", oTSData)\n","\n","# Validation data feed pipeline\n","oVSData = tf.data.Dataset.from_tensor_slices((oDataset.VSSamples, oDataset.VSLabels))\n","oVSData = oVSData.batch(oDataset.VSSampleCount)\n","print(\"Validation data object:\", oVSData)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JddMI7QneYed","executionInfo":{"status":"ok","timestamp":1679924514048,"user_tz":-180,"elapsed":13,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"5df72ab4-6b53-4247-e58c-b225954a1d97"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Training data object: <BatchDataset element_spec=(TensorSpec(shape=(None, 20), dtype=tf.float64, name=None), TensorSpec(shape=(None,), dtype=tf.float64, name=None))>\n","Validation data object: <BatchDataset element_spec=(TensorSpec(shape=(None, 20), dtype=tf.float64, name=None), TensorSpec(shape=(None,), dtype=tf.float64, name=None))>\n"]}]},{"cell_type":"code","source":["if (not os.path.isdir(sModelFolderName)) or IS_RETRAINING:\n","    oDNN.compile(loss=oCostFunction, optimizer=oOptimizer, metrics=[\"accuracy\"])\n","    oProcessLog = oDNN.fit(  oTSData, batch_size=CONFIG[\"Training.BatchSize\"]\n","                            ,epochs=CONFIG[\"Training.MaxEpoch\"]\n","                            ,validation_data=oVSData\n","                            ,class_weight={0: 1, 1: 5}\n","                          )\n","    oDNN.save(sModelFolderName)      \n","else:\n","    # The model is trained and its state is saved (all the trainable parameters are saved). We load the model to recall the samples \n","    oDNN = keras.models.load_model(sModelFolderName)\n","    oProcessLog = None\n","oDNN.summary()    "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4ozjq3lTecxM","executionInfo":{"status":"ok","timestamp":1679924552668,"user_tz":-180,"elapsed":38630,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"f49c1863-7369-4cfe-b81e-cf80a6d047ab"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","32/32 [==============================] - 3s 14ms/step - loss: 1.3724 - accuracy: 0.5363 - val_loss: 0.8659 - val_accuracy: 0.2356\n","Epoch 2/100\n","32/32 [==============================] - 0s 9ms/step - loss: 1.3513 - accuracy: 0.5333 - val_loss: 0.7522 - val_accuracy: 0.4894\n","Epoch 3/100\n","32/32 [==============================] - 0s 8ms/step - loss: 1.3140 - accuracy: 0.5405 - val_loss: 0.6917 - val_accuracy: 0.6112\n","Epoch 4/100\n","32/32 [==============================] - 0s 7ms/step - loss: 1.2695 - accuracy: 0.5499 - val_loss: 0.6612 - val_accuracy: 0.6506\n","Epoch 5/100\n","32/32 [==============================] - 0s 7ms/step - loss: 1.2427 - accuracy: 0.5458 - val_loss: 0.6490 - val_accuracy: 0.6606\n","Epoch 6/100\n","32/32 [==============================] - 0s 7ms/step - loss: 1.2443 - accuracy: 0.5550 - val_loss: 0.6461 - val_accuracy: 0.6681\n","Epoch 7/100\n","32/32 [==============================] - 0s 8ms/step - loss: 1.1868 - accuracy: 0.5724 - val_loss: 0.6493 - val_accuracy: 0.6687\n","Epoch 8/100\n","32/32 [==============================] - 0s 8ms/step - loss: 1.1458 - accuracy: 0.5761 - val_loss: 0.6542 - val_accuracy: 0.6619\n","Epoch 9/100\n","32/32 [==============================] - 0s 8ms/step - loss: 1.1485 - accuracy: 0.5763 - val_loss: 0.6597 - val_accuracy: 0.6581\n","Epoch 10/100\n","32/32 [==============================] - 0s 8ms/step - loss: 1.1353 - accuracy: 0.5811 - val_loss: 0.6633 - val_accuracy: 0.6519\n","Epoch 11/100\n","32/32 [==============================] - 0s 9ms/step - loss: 1.1335 - accuracy: 0.5835 - val_loss: 0.6647 - val_accuracy: 0.6469\n","Epoch 12/100\n","32/32 [==============================] - 0s 5ms/step - loss: 1.0957 - accuracy: 0.5949 - val_loss: 0.6647 - val_accuracy: 0.6469\n","Epoch 13/100\n","32/32 [==============================] - 0s 5ms/step - loss: 1.0859 - accuracy: 0.5921 - val_loss: 0.6627 - val_accuracy: 0.6494\n","Epoch 14/100\n","32/32 [==============================] - 0s 5ms/step - loss: 1.0586 - accuracy: 0.6044 - val_loss: 0.6593 - val_accuracy: 0.6538\n","Epoch 15/100\n","32/32 [==============================] - 0s 5ms/step - loss: 1.0631 - accuracy: 0.6073 - val_loss: 0.6551 - val_accuracy: 0.6569\n","Epoch 16/100\n","32/32 [==============================] - 0s 4ms/step - loss: 1.0251 - accuracy: 0.6116 - val_loss: 0.6504 - val_accuracy: 0.6606\n","Epoch 17/100\n","32/32 [==============================] - 0s 5ms/step - loss: 1.0369 - accuracy: 0.6165 - val_loss: 0.6457 - val_accuracy: 0.6612\n","Epoch 18/100\n","32/32 [==============================] - 0s 5ms/step - loss: 1.0569 - accuracy: 0.6018 - val_loss: 0.6397 - val_accuracy: 0.6675\n","Epoch 19/100\n","32/32 [==============================] - 0s 5ms/step - loss: 1.0215 - accuracy: 0.6209 - val_loss: 0.6339 - val_accuracy: 0.6731\n","Epoch 20/100\n","32/32 [==============================] - 0s 4ms/step - loss: 0.9924 - accuracy: 0.6270 - val_loss: 0.6281 - val_accuracy: 0.6781\n","Epoch 21/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.9983 - accuracy: 0.6268 - val_loss: 0.6221 - val_accuracy: 0.6800\n","Epoch 22/100\n","32/32 [==============================] - 0s 5ms/step - loss: 1.0077 - accuracy: 0.6224 - val_loss: 0.6164 - val_accuracy: 0.6806\n","Epoch 23/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.9786 - accuracy: 0.6360 - val_loss: 0.6110 - val_accuracy: 0.6844\n","Epoch 24/100\n","32/32 [==============================] - 0s 5ms/step - loss: 1.0016 - accuracy: 0.6291 - val_loss: 0.6056 - val_accuracy: 0.6913\n","Epoch 25/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.9775 - accuracy: 0.6315 - val_loss: 0.6011 - val_accuracy: 0.6963\n","Epoch 26/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.9604 - accuracy: 0.6379 - val_loss: 0.5962 - val_accuracy: 0.7006\n","Epoch 27/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.9471 - accuracy: 0.6521 - val_loss: 0.5917 - val_accuracy: 0.7063\n","Epoch 28/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.9552 - accuracy: 0.6556 - val_loss: 0.5874 - val_accuracy: 0.7088\n","Epoch 29/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.9571 - accuracy: 0.6468 - val_loss: 0.5827 - val_accuracy: 0.7156\n","Epoch 30/100\n","32/32 [==============================] - 0s 6ms/step - loss: 0.9163 - accuracy: 0.6676 - val_loss: 0.5788 - val_accuracy: 0.7194\n","Epoch 31/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.9375 - accuracy: 0.6560 - val_loss: 0.5742 - val_accuracy: 0.7244\n","Epoch 32/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.9158 - accuracy: 0.6623 - val_loss: 0.5708 - val_accuracy: 0.7287\n","Epoch 33/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.9337 - accuracy: 0.6660 - val_loss: 0.5668 - val_accuracy: 0.7337\n","Epoch 34/100\n","32/32 [==============================] - 0s 6ms/step - loss: 0.8990 - accuracy: 0.6743 - val_loss: 0.5629 - val_accuracy: 0.7331\n","Epoch 35/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.9122 - accuracy: 0.6745 - val_loss: 0.5591 - val_accuracy: 0.7406\n","Epoch 36/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.9033 - accuracy: 0.6801 - val_loss: 0.5557 - val_accuracy: 0.7444\n","Epoch 37/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.9105 - accuracy: 0.6785 - val_loss: 0.5519 - val_accuracy: 0.7462\n","Epoch 38/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.8820 - accuracy: 0.6831 - val_loss: 0.5484 - val_accuracy: 0.7513\n","Epoch 39/100\n","32/32 [==============================] - 0s 6ms/step - loss: 0.8850 - accuracy: 0.6821 - val_loss: 0.5451 - val_accuracy: 0.7538\n","Epoch 40/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.8783 - accuracy: 0.6934 - val_loss: 0.5420 - val_accuracy: 0.7575\n","Epoch 41/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.8610 - accuracy: 0.7009 - val_loss: 0.5388 - val_accuracy: 0.7594\n","Epoch 42/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.8681 - accuracy: 0.6953 - val_loss: 0.5359 - val_accuracy: 0.7631\n","Epoch 43/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.8682 - accuracy: 0.6896 - val_loss: 0.5332 - val_accuracy: 0.7675\n","Epoch 44/100\n","32/32 [==============================] - 0s 6ms/step - loss: 0.8620 - accuracy: 0.6993 - val_loss: 0.5301 - val_accuracy: 0.7700\n","Epoch 45/100\n","32/32 [==============================] - 0s 6ms/step - loss: 0.8677 - accuracy: 0.6945 - val_loss: 0.5273 - val_accuracy: 0.7731\n","Epoch 46/100\n","32/32 [==============================] - 0s 9ms/step - loss: 0.8532 - accuracy: 0.7004 - val_loss: 0.5244 - val_accuracy: 0.7750\n","Epoch 47/100\n","32/32 [==============================] - 0s 7ms/step - loss: 0.8585 - accuracy: 0.7017 - val_loss: 0.5216 - val_accuracy: 0.7756\n","Epoch 48/100\n","32/32 [==============================] - 0s 8ms/step - loss: 0.8445 - accuracy: 0.7139 - val_loss: 0.5189 - val_accuracy: 0.7775\n","Epoch 49/100\n","32/32 [==============================] - 0s 8ms/step - loss: 0.8658 - accuracy: 0.7090 - val_loss: 0.5164 - val_accuracy: 0.7800\n","Epoch 50/100\n","32/32 [==============================] - 0s 7ms/step - loss: 0.8180 - accuracy: 0.7258 - val_loss: 0.5139 - val_accuracy: 0.7806\n","Epoch 51/100\n","32/32 [==============================] - 0s 8ms/step - loss: 0.8390 - accuracy: 0.7145 - val_loss: 0.5115 - val_accuracy: 0.7825\n","Epoch 52/100\n","32/32 [==============================] - 0s 7ms/step - loss: 0.8274 - accuracy: 0.7183 - val_loss: 0.5091 - val_accuracy: 0.7844\n","Epoch 53/100\n","32/32 [==============================] - 0s 9ms/step - loss: 0.8296 - accuracy: 0.7175 - val_loss: 0.5069 - val_accuracy: 0.7856\n","Epoch 54/100\n","32/32 [==============================] - 0s 8ms/step - loss: 0.8362 - accuracy: 0.7131 - val_loss: 0.5047 - val_accuracy: 0.7862\n","Epoch 55/100\n","32/32 [==============================] - 0s 9ms/step - loss: 0.8233 - accuracy: 0.7262 - val_loss: 0.5021 - val_accuracy: 0.7906\n","Epoch 56/100\n","32/32 [==============================] - 0s 8ms/step - loss: 0.8033 - accuracy: 0.7309 - val_loss: 0.4999 - val_accuracy: 0.7937\n","Epoch 57/100\n","32/32 [==============================] - 0s 7ms/step - loss: 0.8272 - accuracy: 0.7230 - val_loss: 0.4976 - val_accuracy: 0.7944\n","Epoch 58/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.8115 - accuracy: 0.7328 - val_loss: 0.4957 - val_accuracy: 0.7950\n","Epoch 59/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.8098 - accuracy: 0.7323 - val_loss: 0.4934 - val_accuracy: 0.7987\n","Epoch 60/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.8000 - accuracy: 0.7444 - val_loss: 0.4913 - val_accuracy: 0.8019\n","Epoch 61/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.8098 - accuracy: 0.7333 - val_loss: 0.4892 - val_accuracy: 0.8050\n","Epoch 62/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7919 - accuracy: 0.7445 - val_loss: 0.4873 - val_accuracy: 0.8062\n","Epoch 63/100\n","32/32 [==============================] - 0s 6ms/step - loss: 0.7987 - accuracy: 0.7433 - val_loss: 0.4854 - val_accuracy: 0.8087\n","Epoch 64/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7889 - accuracy: 0.7470 - val_loss: 0.4835 - val_accuracy: 0.8100\n","Epoch 65/100\n","32/32 [==============================] - 0s 6ms/step - loss: 0.7950 - accuracy: 0.7461 - val_loss: 0.4817 - val_accuracy: 0.8106\n","Epoch 66/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7935 - accuracy: 0.7450 - val_loss: 0.4799 - val_accuracy: 0.8125\n","Epoch 67/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.8059 - accuracy: 0.7450 - val_loss: 0.4783 - val_accuracy: 0.8144\n","Epoch 68/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7896 - accuracy: 0.7486 - val_loss: 0.4762 - val_accuracy: 0.8144\n","Epoch 69/100\n","32/32 [==============================] - 0s 6ms/step - loss: 0.7855 - accuracy: 0.7509 - val_loss: 0.4747 - val_accuracy: 0.8163\n","Epoch 70/100\n","32/32 [==============================] - 0s 7ms/step - loss: 0.7691 - accuracy: 0.7536 - val_loss: 0.4728 - val_accuracy: 0.8163\n","Epoch 71/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7836 - accuracy: 0.7553 - val_loss: 0.4714 - val_accuracy: 0.8181\n","Epoch 72/100\n","32/32 [==============================] - 0s 6ms/step - loss: 0.7696 - accuracy: 0.7589 - val_loss: 0.4698 - val_accuracy: 0.8181\n","Epoch 73/100\n","32/32 [==============================] - 0s 4ms/step - loss: 0.7673 - accuracy: 0.7589 - val_loss: 0.4680 - val_accuracy: 0.8194\n","Epoch 74/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7824 - accuracy: 0.7550 - val_loss: 0.4663 - val_accuracy: 0.8200\n","Epoch 75/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7803 - accuracy: 0.7545 - val_loss: 0.4647 - val_accuracy: 0.8206\n","Epoch 76/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7526 - accuracy: 0.7719 - val_loss: 0.4630 - val_accuracy: 0.8244\n","Epoch 77/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7630 - accuracy: 0.7664 - val_loss: 0.4611 - val_accuracy: 0.8250\n","Epoch 78/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7704 - accuracy: 0.7649 - val_loss: 0.4595 - val_accuracy: 0.8250\n","Epoch 79/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7505 - accuracy: 0.7678 - val_loss: 0.4580 - val_accuracy: 0.8256\n","Epoch 80/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7602 - accuracy: 0.7652 - val_loss: 0.4564 - val_accuracy: 0.8263\n","Epoch 81/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7563 - accuracy: 0.7725 - val_loss: 0.4552 - val_accuracy: 0.8269\n","Epoch 82/100\n","32/32 [==============================] - 0s 6ms/step - loss: 0.7313 - accuracy: 0.7750 - val_loss: 0.4538 - val_accuracy: 0.8269\n","Epoch 83/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7533 - accuracy: 0.7738 - val_loss: 0.4522 - val_accuracy: 0.8281\n","Epoch 84/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7477 - accuracy: 0.7755 - val_loss: 0.4508 - val_accuracy: 0.8294\n","Epoch 85/100\n","32/32 [==============================] - 0s 4ms/step - loss: 0.7396 - accuracy: 0.7800 - val_loss: 0.4493 - val_accuracy: 0.8319\n","Epoch 86/100\n","32/32 [==============================] - 0s 4ms/step - loss: 0.7303 - accuracy: 0.7788 - val_loss: 0.4476 - val_accuracy: 0.8319\n","Epoch 87/100\n","32/32 [==============================] - 0s 4ms/step - loss: 0.7297 - accuracy: 0.7811 - val_loss: 0.4459 - val_accuracy: 0.8319\n","Epoch 88/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7342 - accuracy: 0.7781 - val_loss: 0.4446 - val_accuracy: 0.8331\n","Epoch 89/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7296 - accuracy: 0.7810 - val_loss: 0.4436 - val_accuracy: 0.8331\n","Epoch 90/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7186 - accuracy: 0.7886 - val_loss: 0.4423 - val_accuracy: 0.8344\n","Epoch 91/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7205 - accuracy: 0.7905 - val_loss: 0.4407 - val_accuracy: 0.8344\n","Epoch 92/100\n","32/32 [==============================] - 0s 5ms/step - loss: 0.7254 - accuracy: 0.7874 - val_loss: 0.4393 - val_accuracy: 0.8350\n","Epoch 93/100\n","32/32 [==============================] - 0s 7ms/step - loss: 0.7211 - accuracy: 0.7872 - val_loss: 0.4378 - val_accuracy: 0.8350\n","Epoch 94/100\n","32/32 [==============================] - 0s 8ms/step - loss: 0.7215 - accuracy: 0.7877 - val_loss: 0.4365 - val_accuracy: 0.8356\n","Epoch 95/100\n","32/32 [==============================] - 0s 8ms/step - loss: 0.7187 - accuracy: 0.7902 - val_loss: 0.4350 - val_accuracy: 0.8350\n","Epoch 96/100\n","32/32 [==============================] - 0s 9ms/step - loss: 0.7295 - accuracy: 0.7894 - val_loss: 0.4336 - val_accuracy: 0.8363\n","Epoch 97/100\n","32/32 [==============================] - 0s 7ms/step - loss: 0.7251 - accuracy: 0.7846 - val_loss: 0.4322 - val_accuracy: 0.8375\n","Epoch 98/100\n","32/32 [==============================] - 0s 8ms/step - loss: 0.7251 - accuracy: 0.7889 - val_loss: 0.4312 - val_accuracy: 0.8388\n","Epoch 99/100\n","32/32 [==============================] - 0s 7ms/step - loss: 0.7146 - accuracy: 0.8000 - val_loss: 0.4303 - val_accuracy: 0.8400\n","Epoch 100/100\n","32/32 [==============================] - 0s 8ms/step - loss: 0.7189 - accuracy: 0.7928 - val_loss: 0.4292 - val_accuracy: 0.8413\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:Found untraced functions such as _update_step_xla while saving (showing 1 of 1). These functions will not be directly callable after loading.\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"cdnn\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               multiple                  504       \n","                                                                 \n"," dense_1 (Dense)             multiple                  800       \n","                                                                 \n"," dense_2 (Dense)             multiple                  1056      \n","                                                                 \n"," batch_normalization (BatchN  multiple                 96        \n"," ormalization)                                                   \n","                                                                 \n"," batch_normalization_1 (Batc  multiple                 128       \n"," hNormalization)                                                 \n","                                                                 \n"," batch_normalization_2 (Batc  multiple                 128       \n"," hNormalization)                                                 \n","                                                                 \n"," dropout (Dropout)           multiple                  0         \n","                                                                 \n"," dense_3 (Dense)             multiple                  33        \n","                                                                 \n"," activation (Activation)     multiple                  0         \n","                                                                 \n","=================================================================\n","Total params: 2,745\n","Trainable params: 2,569\n","Non-trainable params: 176\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["if oProcessLog is not None:\n","  oTrainingLogPlot = CPlotTrainingLogs(oProcessLog.history)\n","  oTrainingLogPlot.Show(\"DNN\", p_oCostFunction = oCostFunction)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":590},"id":"bH5VZE9XeoEB","executionInfo":{"status":"ok","timestamp":1679924553201,"user_tz":-180,"elapsed":564,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"d23f3a76-35af-4189-f4d6-1508f13782b2"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Keys of training process log: dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["nPredictedValues = oDNN.predict(oDataset.VSSamples)\n","nPredictedClassLabels = []\n","for nValue in nPredictedValues:\n","  if nValue > 0.83:\n","    nPredictedClassLabels.append(1)\n","  else:\n","    nPredictedClassLabels.append(0)\n","\n","\n","nTargetClassLabels     = oDataset.VSLabels   \n","\n","# We create an evaluator object that will produce several metrics\n","oEvaluator = CEvaluator(nTargetClassLabels, nPredictedClassLabels)\n","oEvaluator.PrintConfusionMatrix()\n","print(\"Per Class Recall (Accuracy)  :\", oEvaluator.Recall)\n","print(\"Per Class Precision          :\", oEvaluator.Precision)\n","print(\"Average Accuracy: %.4f\" % oEvaluator.AverageRecall)\n","print(\"Average F1 Score: %.4f\" % oEvaluator.AverageF1Score)\n","\n","# We create a plot of the confusion matrix      \n","oConfusionMatrixPlot = CPlotConfusionMatrix(oEvaluator.ConfusionMatrix)\n","oConfusionMatrixPlot.Show()   "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":675},"id":"C9rgGZT6eu8f","executionInfo":{"status":"ok","timestamp":1679924554168,"user_tz":-180,"elapsed":970,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"d6f6e836-4b45-41a5-b499-b83948292c5a"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["50/50 [==============================] - 0s 2ms/step\n","                    Predicted  \n","               ------------\n","        Actual | 1374   27 |\n","               |  139   60 |\n","               ------------\n","Per Class Recall (Accuracy)  : [0.98072805 0.30150754]\n","Per Class Precision          : [0.90812954 0.68965517]\n","Average Accuracy: 0.8962\n","Average F1 Score: 0.8779\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 540x540 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}