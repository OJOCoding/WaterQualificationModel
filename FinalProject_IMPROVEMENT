{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMOTtt9gqix0ky8iXQf5uM0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Importing Data from Dataset.**"],"metadata":{"id":"Y6ruewiJnBls"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"HZmHxHZxa1RB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680005096193,"user_tz":-180,"elapsed":23517,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"9d7359b3-64e2-4c76-c59f-cccb826f9519"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive/\n","--------------------------------------------------------------------------------\n","Current dir:  /content/gdrive/My Drive/Colab Notebooks/Final_Project_ONILUCA\n","---------------------------------------- Contents ----------------------------------------\n","FinalProject_BASELINE\t  WATER_DNN1\t       WATER_IMPROVED_DNN5\n","FinalProject_IMPROVEMENT  WATER_IMPROVED_DNN1  WATER_IMPROVED_DNN6\n","mllibrary\t\t  WATER_IMPROVED_DNN2  WATER_IMPROVED_DNN7\n","PAPER.docx\t\t  WATER_IMPROVED_DNN3  waterQuality1.csv\n","PAPER.pdf\t\t  WATER_IMPROVED_DNN4\n"]}],"source":["import os\n","from google.colab import drive\n","from google.colab import files\n","\n","drive.mount('/content/gdrive/')\n","print(\"-\"*80)\n","\n","\n","# Change to this source code folder\n","os.chdir(\"/content/gdrive/My Drive/Colab Notebooks/Final_Project_ONILUCA\")\n","print(\"Current dir: \", os.getcwd())\n","print(\"-\"*40, \"Contents\", \"-\"*40)\n","!ls \"/content/gdrive/My Drive/Colab Notebooks/Final_Project_ONILUCA\"\n"]},{"cell_type":"markdown","source":["# Creating **ANN**"],"metadata":{"id":"2e_GGOnqnWSp"}},{"cell_type":"code","source":["import os\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","import pandas as pd\n","import seaborn as sb\n","import json\n","from tensorflow import keras\n","from sklearn import preprocessing\n","from mllibrary.utils import RandomSeed\n","from mllibrary.visualization import CPlot, CPlotTrainingLogs, CPlotConfusionMatrix\n","from mllibrary.evaluation import CEvaluator\n","from tensorflow.keras.regularizers import L2\n","\n","\n","# __________ | Settings | __________\n","IS_RETRAINING           = True\n","RandomSeed(2022)       "],"metadata":{"id":"XCh5rgCmnUjX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680005108321,"user_tz":-180,"elapsed":12133,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"9bfdcc0e-37c9-4acf-86a5-ec58462eed74"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Random seed set to 2022\n"]}]},{"cell_type":"code","source":["CONFIG_BASELINE = {\n","            \"ModelName\": \"WATER_IMPROVED_DNN1\"  \n","           ,\"DNN.DropoutRate\": 0.5\n","           ,\"DNN.InputFeatures\": 20\n","           ,\"DNN.LayerNeurons\": [24, 32, 32, 1]\n","           ,\"DNN.Classes\": 1\n","           ,\"Training.MaxEpoch\": 100\n","           ,\"Training.BatchSize\": 200\n","           ,\"Training.LearningRate\": 0.0001\n","           ,\"Training.RegularizeL2\": True\n","           ,\"Training.WeightDecay\": 1e-5\n","          }\n","CONFIG_BASELINE1 = {\n","            \"ModelName\": \"WATER_IMPROVED_DNN2\"  \n","           ,\"DNN.DropoutRate\": 0.5\n","           ,\"DNN.InputFeatures\": 20\n","           ,\"DNN.LayerNeurons\": [16,16,16, 1]\n","           ,\"DNN.Classes\": 1\n","           ,\"Training.MaxEpoch\": 250\n","           ,\"Training.BatchSize\": 128\n","           ,\"Training.LearningRate\": 0.0001\n","           ,\"Training.RegularizeL2\": True\n","           ,\"Training.WeightDecay\": 1e-3\n","          }\n","\n","CONFIG_BASELINE2 = {\n","            \"ModelName\": \"WATER_IMPROVED_DNN3\"  \n","           ,\"DNN.DropoutRate\": 0.5\n","           ,\"DNN.InputFeatures\": 20\n","           ,\"DNN.LayerNeurons\": [16,16,16,16,16,16, 1]\n","           ,\"DNN.Classes\": 1\n","           ,\"Training.MaxEpoch\": 200\n","           ,\"Training.BatchSize\": 128\n","           ,\"Training.LearningRate\": 0.0005\n","           ,\"Training.RegularizeL2\": True\n","           ,\"Training.WeightDecay\": 1e-5\n","          }\n","CONFIG_BASELINE3 = {\n","            \"ModelName\": \"WATER_IMPROVED_DNN4\"  \n","           ,\"DNN.DropoutRate\": 0.5\n","           ,\"DNN.InputFeatures\": 20\n","           ,\"DNN.LayerNeurons\": [32,32,16,16,16, 1]\n","           ,\"DNN.Classes\": 1\n","           ,\"Training.MaxEpoch\": 200\n","           ,\"Training.BatchSize\": 128\n","           ,\"Training.LearningRate\": 0.0005\n","           ,\"Training.RegularizeL2\": True\n","           ,\"Training.WeightDecay\": 1e-4\n","          }\n","CONFIG_BASELINE4 = {\n","            \"ModelName\": \"WATER_IMPROVED_DNN4\"  \n","           ,\"DNN.DropoutRate\": 0.5\n","           ,\"DNN.InputFeatures\": 20\n","           ,\"DNN.LayerNeurons\": [32,32,16,16,16, 1]\n","           ,\"DNN.Classes\": 1\n","           ,\"Training.MaxEpoch\": 200\n","           ,\"Training.BatchSize\": 128\n","           ,\"Training.LearningRate\": 0.0005\n","           ,\"Training.RegularizeL2\": True\n","           ,\"Training.WeightDecay\": 1e-4\n","          }        \n","CONFIG_BASELINE40 = {\n","            \"ModelName\": \"WATER_IMPROVED_DNN4\"  \n","           ,\"DNN.DropoutRate\": 0.5\n","           ,\"DNN.InputFeatures\": 20\n","           ,\"DNN.LayerNeurons\": [32,32,32,16,16,16, 1]\n","           ,\"DNN.Classes\": 1\n","           ,\"Training.MaxEpoch\": 200\n","           ,\"Training.BatchSize\": 128\n","           ,\"Training.LearningRate\": 0.0005\n","           ,\"Training.RegularizeL2\": True\n","           ,\"Training.WeightDecay\": 1e-4\n","          }   \n","CONFIG_BASELINE5 = {\n","            \"ModelName\": \"WATER_IMPROVED_DNN6\"  \n","           ,\"DNN.DropoutRate\": 0.4\n","           ,\"DNN.InputFeatures\": 20\n","           ,\"DNN.LayerNeurons\": [16,16,16,16,16,16,16,16,16,1]\n","           ,\"DNN.Classes\": 1\n","           ,\"Training.MaxEpoch\": 200\n","           ,\"Training.BatchSize\": 124\n","           ,\"Training.LearningRate\": 0.0005\n","           ,\"Training.RegularizeL2\": True\n","           ,\"Training.WeightDecay\": 1e-5\n","          }\n","CONFIG_BASELINE6 = {\n","            \"ModelName\": \"WATER_IMPROVED_DNN7\"  \n","           ,\"DNN.DropoutRate\": 0.5\n","           ,\"DNN.InputFeatures\": 20\n","           ,\"DNN.LayerNeurons\": [32,32,16,16,16, 1]\n","           ,\"DNN.Classes\": 1\n","           ,\"Training.MaxEpoch\": 200\n","           ,\"Training.BatchSize\": 4096\n","           ,\"Training.LearningRate\": 0.0005\n","           ,\"Training.RegularizeL2\": True\n","           ,\"Training.WeightDecay\": 1e-4\n","          }\n","CONFIG = CONFIG_BASELINE3"],"metadata":{"id":"vl7_QxJUc2z6","executionInfo":{"status":"ok","timestamp":1680009112776,"user_tz":-180,"elapsed":1550,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}}},"execution_count":112,"outputs":[]},{"cell_type":"code","source":["# Load the dataset into a pandas dataframe object and show header/first samples\n","oDF = pd.read_csv(\"waterQuality1.csv\", delimiter=\",\");\n","oDF.head()"],"metadata":{"id":"GxOxQ9AkxYvu","colab":{"base_uri":"https://localhost:8080/","height":236},"executionInfo":{"status":"ok","timestamp":1680009113172,"user_tz":-180,"elapsed":18,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"cd629db4-0e20-44e5-8ae1-fbb9aa11769d"},"execution_count":113,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   aluminium  ammonia  arsenic  barium  cadmium  chloramine  chromium  copper  \\\n","0       1.65     9.08     0.04    2.85    0.007        0.35      0.83    0.17   \n","1       2.32    21.16     0.01    3.31    0.002        5.28      0.68    0.66   \n","2       1.01    14.02     0.04    0.58    0.008        4.24      0.53    0.02   \n","3       1.36    11.33     0.04    2.96    0.001        7.23      0.03    1.66   \n","4       0.92    24.33     0.03    0.20    0.006        2.67      0.69    0.57   \n","\n","   flouride  bacteria  ...   lead  nitrates  nitrites  mercury  perchlorate  \\\n","0      0.05      0.20  ...  0.054     16.08      1.13    0.007        37.75   \n","1      0.90      0.65  ...  0.100      2.01      1.93    0.003        32.26   \n","2      0.99      0.05  ...  0.078     14.16      1.11    0.006        50.28   \n","3      1.08      0.71  ...  0.016      1.41      1.29    0.004         9.12   \n","4      0.61      0.13  ...  0.117      6.74      1.11    0.003        16.90   \n","\n","   radium  selenium  silver  uranium  is_safe  \n","0    6.78      0.08    0.34     0.02        1  \n","1    3.21      0.08    0.27     0.05        1  \n","2    7.07      0.07    0.44     0.01        0  \n","3    1.72      0.02    0.45     0.05        1  \n","4    2.41      0.02    0.06     0.02        1  \n","\n","[5 rows x 21 columns]"],"text/html":["\n","  <div id=\"df-f198ad61-f8e2-4ff3-a9c6-475687ad7995\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>aluminium</th>\n","      <th>ammonia</th>\n","      <th>arsenic</th>\n","      <th>barium</th>\n","      <th>cadmium</th>\n","      <th>chloramine</th>\n","      <th>chromium</th>\n","      <th>copper</th>\n","      <th>flouride</th>\n","      <th>bacteria</th>\n","      <th>...</th>\n","      <th>lead</th>\n","      <th>nitrates</th>\n","      <th>nitrites</th>\n","      <th>mercury</th>\n","      <th>perchlorate</th>\n","      <th>radium</th>\n","      <th>selenium</th>\n","      <th>silver</th>\n","      <th>uranium</th>\n","      <th>is_safe</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.65</td>\n","      <td>9.08</td>\n","      <td>0.04</td>\n","      <td>2.85</td>\n","      <td>0.007</td>\n","      <td>0.35</td>\n","      <td>0.83</td>\n","      <td>0.17</td>\n","      <td>0.05</td>\n","      <td>0.20</td>\n","      <td>...</td>\n","      <td>0.054</td>\n","      <td>16.08</td>\n","      <td>1.13</td>\n","      <td>0.007</td>\n","      <td>37.75</td>\n","      <td>6.78</td>\n","      <td>0.08</td>\n","      <td>0.34</td>\n","      <td>0.02</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.32</td>\n","      <td>21.16</td>\n","      <td>0.01</td>\n","      <td>3.31</td>\n","      <td>0.002</td>\n","      <td>5.28</td>\n","      <td>0.68</td>\n","      <td>0.66</td>\n","      <td>0.90</td>\n","      <td>0.65</td>\n","      <td>...</td>\n","      <td>0.100</td>\n","      <td>2.01</td>\n","      <td>1.93</td>\n","      <td>0.003</td>\n","      <td>32.26</td>\n","      <td>3.21</td>\n","      <td>0.08</td>\n","      <td>0.27</td>\n","      <td>0.05</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.01</td>\n","      <td>14.02</td>\n","      <td>0.04</td>\n","      <td>0.58</td>\n","      <td>0.008</td>\n","      <td>4.24</td>\n","      <td>0.53</td>\n","      <td>0.02</td>\n","      <td>0.99</td>\n","      <td>0.05</td>\n","      <td>...</td>\n","      <td>0.078</td>\n","      <td>14.16</td>\n","      <td>1.11</td>\n","      <td>0.006</td>\n","      <td>50.28</td>\n","      <td>7.07</td>\n","      <td>0.07</td>\n","      <td>0.44</td>\n","      <td>0.01</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.36</td>\n","      <td>11.33</td>\n","      <td>0.04</td>\n","      <td>2.96</td>\n","      <td>0.001</td>\n","      <td>7.23</td>\n","      <td>0.03</td>\n","      <td>1.66</td>\n","      <td>1.08</td>\n","      <td>0.71</td>\n","      <td>...</td>\n","      <td>0.016</td>\n","      <td>1.41</td>\n","      <td>1.29</td>\n","      <td>0.004</td>\n","      <td>9.12</td>\n","      <td>1.72</td>\n","      <td>0.02</td>\n","      <td>0.45</td>\n","      <td>0.05</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.92</td>\n","      <td>24.33</td>\n","      <td>0.03</td>\n","      <td>0.20</td>\n","      <td>0.006</td>\n","      <td>2.67</td>\n","      <td>0.69</td>\n","      <td>0.57</td>\n","      <td>0.61</td>\n","      <td>0.13</td>\n","      <td>...</td>\n","      <td>0.117</td>\n","      <td>6.74</td>\n","      <td>1.11</td>\n","      <td>0.003</td>\n","      <td>16.90</td>\n","      <td>2.41</td>\n","      <td>0.02</td>\n","      <td>0.06</td>\n","      <td>0.02</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 21 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f198ad61-f8e2-4ff3-a9c6-475687ad7995')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f198ad61-f8e2-4ff3-a9c6-475687ad7995 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f198ad61-f8e2-4ff3-a9c6-475687ad7995');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":113}]},{"cell_type":"code","source":["oDF.info()"],"metadata":{"id":"1byLEt93dP86","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680009113174,"user_tz":-180,"elapsed":17,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"465b475a-f915-4c3c-81e4-c8f333d83ee3"},"execution_count":114,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 7996 entries, 0 to 7995\n","Data columns (total 21 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   aluminium    7996 non-null   float64\n"," 1   ammonia      7996 non-null   float64\n"," 2   arsenic      7996 non-null   float64\n"," 3   barium       7996 non-null   float64\n"," 4   cadmium      7996 non-null   float64\n"," 5   chloramine   7996 non-null   float64\n"," 6   chromium     7996 non-null   float64\n"," 7   copper       7996 non-null   float64\n"," 8   flouride     7996 non-null   float64\n"," 9   bacteria     7996 non-null   float64\n"," 10  viruses      7996 non-null   float64\n"," 11  lead         7996 non-null   float64\n"," 12  nitrates     7996 non-null   float64\n"," 13  nitrites     7996 non-null   float64\n"," 14  mercury      7996 non-null   float64\n"," 15  perchlorate  7996 non-null   float64\n"," 16  radium       7996 non-null   float64\n"," 17  selenium     7996 non-null   float64\n"," 18  silver       7996 non-null   float64\n"," 19  uranium      7996 non-null   float64\n"," 20  is_safe      7996 non-null   int64  \n","dtypes: float64(20), int64(1)\n","memory usage: 1.3 MB\n"]}]},{"cell_type":"code","source":["print(oDF['is_safe'].value_counts())\n","print(\"-\"*80)\n","sb.countplot(oDF['is_safe'])\n"],"metadata":{"id":"i65AM1DDdV2G","colab":{"base_uri":"https://localhost:8080/","height":352},"executionInfo":{"status":"ok","timestamp":1680009113438,"user_tz":-180,"elapsed":278,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"e3413877-22f0-4765-b8c4-0bd62675ebf3"},"execution_count":115,"outputs":[{"output_type":"stream","name":"stdout","text":["0    7084\n","1     912\n","Name: is_safe, dtype: int64\n","--------------------------------------------------------------------------------\n"]},{"output_type":"execute_result","data":{"text/plain":["<Axes: ylabel='count'>"]},"metadata":{},"execution_count":115},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split    # import a standalone procedure function from the pacckage\n","from imblearn.over_sampling import SMOTE\n","\n","# ====================================================================================================\n","class CWaterDataset(object):\n","  # --------------------------------------------------------------------------------------\n","  # Constructor\n","  def __init__(self):\n","    # ................................................................\n","    # // Fields \\\\\n","    self.Samples   = None\n","    self.Labels    = None\n","    self.SampleCount = None\n","\n","    self.TSSamples = None\n","    self.TSLabels  = None\n","    self.TSSampleCount = 0\n","\n","    self.VSSamples = None\n","    self.VSLabels  = None\n","    self.VSSampleCount = 0\n","    # ................................................................\n","\n","  \n","    RandomSeed(2022)\n","  # --------------------------------------------------------------------------------------    \n","  def LoadFromFile(self, p_sFileName = \"waterQuality1.csv\"):\n","    oDF = pd.read_csv(p_sFileName, delimiter=\",\");\n","    \n","\n","    nArray = oDF.to_numpy();\n","    print(\"Dataset shape:\", nArray.shape)\n","    self.Samples = nArray[:, :20]\n","    print(\"Features shape:\", self.Samples.shape)\n","    self.Labels = nArray[:,20]\n","    print(\"Labels shape:\", self.Labels.shape)\n","   \n","  # --------------------------------------------------------------------------------------\n","  def Split(self, p_nValidationSamplesPC=0.10):\n"," \n","    self.TSSamples, self.VSSamples, self.TSLabels, self.VSLabels = train_test_split(\n","                                                              self.Samples, self.Labels\n","                                                            , test_size=p_nValidationSamplesPC, random_state=2021)\n","    #sm = SMOTE(random_state=42)\n","    #self.TSSamples, self.TSLabels = sm.fit_resample(self.TSSamples ,self.TSLabels) \n"," \n","    self.TSSampleCount = self.TSSamples.shape[0]\n","    self.VSSampleCount = self.VSSamples.shape[0]\n","    print(\"%d samples in the Training Set\" % self.TSSampleCount)\n","    print(\"%d samples in the Validation Set\"%  self.VSSampleCount)\n","    print('.'*80)\n","  # --------------------------------------------------------------------------------------\n","# ===================================================================================================="],"metadata":{"id":"yKo4_IUfo-Js","executionInfo":{"status":"ok","timestamp":1680009113439,"user_tz":-180,"elapsed":10,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}}},"execution_count":116,"outputs":[]},{"cell_type":"code","source":["oDataset = CWaterDataset()\n","oDataset.LoadFromFile()\n","oStandardizer = preprocessing.StandardScaler()\n","oDataset.Samples = oStandardizer.fit(oDataset.Samples).transform(oDataset.Samples)\n","oDataset.Split(0.2)"],"metadata":{"id":"QmxUx_GWeC1a","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680009113440,"user_tz":-180,"elapsed":11,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"3cee5e9c-7e0b-4d40-8c84-531e17a58bee"},"execution_count":117,"outputs":[{"output_type":"stream","name":"stdout","text":["Random seed set to 2022\n","Dataset shape: (7996, 21)\n","Features shape: (7996, 20)\n","Labels shape: (7996,)\n","6396 samples in the Training Set\n","1600 samples in the Validation Set\n","................................................................................\n"]}]},{"cell_type":"code","source":["#from models.dnn import CDNNBasic\n","\n","from tensorflow import keras\n","from tensorflow.keras.layers import Dense, Dropout, BatchNormalization\n","from tensorflow.keras.layers import Activation, Softmax\n","\n","\n","# =========================================================================================================================\n","class CDNN(keras.Model):\n","    # --------------------------------------------------------------------------------------\n","    def __init__(self, p_oConfig):\n","        super(CDNN, self).__init__(p_oConfig)\n","\n","        # ..................... Object Attributes ...........................\n","        self.Config = p_oConfig\n","        self.ClassCount = self.Config[\"DNN.LayerNeurons\"][-1]\n","        self.IsRegression = (self.ClassCount == 0)\n","        self.LayerNeurons = self.Config[\"DNN.LayerNeurons\"][:-1]\n","        self.HiddenLayers = [None] * len(self.LayerNeurons)\n","        self.NormalizationLayers = [None] * len(self.LayerNeurons)\n","        self.DropOutLayer = None\n","        self.OutputLayer = None\n","        #self.SoftmaxActivation = None\n","        self.Classifier = None\n","        self.Input = None\n","        # ...................................................................\n","        if \"DNN.ActivationFunction\" not in self.Config:\n","            self.Config[\"DNN.ActivationFunction\"] = \"relu\"\n","\n","        if \"DNN.DropoutRate\" not in self.Config:\n","            self.IsDroppingOut = False\n","        else:\n","            self.IsDroppingOut = (self.Config[\"DNN.DropoutRate\"] != 0.0)\n","\n","        self.Create()\n","\n","    # --------------------------------------------------------------------------------------\n","    def Create(self):\n","        for nIndex, nLayerNeuronCount in enumerate(self.LayerNeurons):\n","            self.HiddenLayers[nIndex] = Dense(nLayerNeuronCount, activation=self.Config[\"DNN.ActivationFunction\"],\n","                                              use_bias=True\n","                                              ,kernel_regularizer=self.createWeightRegulizer()\n","                                              )\n","            self.NormalizationLayers[nIndex] = BatchNormalization()\n","\n","        if self.IsDroppingOut:\n","            self.DropOutLayer = Dropout(self.Config[\"DNN.DropoutRate\"])\n","\n","        \n","        \n","        self.OutputLayer = Dense(self.ClassCount, use_bias=not self.IsRegression, kernel_regularizer=self.createWeightRegulizer())\n","        if not self.IsRegression:\n","          if self.ClassCount == 1:\n","            self.Classifier = Activation(\"sigmoid\")\n","          else:\n","            self.Classifier = Softmax()\n","        # --------------------------------------------------------------------------------------\n","     # --------------------------------------------------------------------------------------------------------\n","    def createWeightRegulizer(self):\n","        if self.Config[\"Training.RegularizeL2\"]:\n","            oWeightRegularizer = L2(self.Config[\"Training.WeightDecay\"])\n","        else:\n","            oWeightRegularizer = None\n","        return oWeightRegularizer   \n","    def call(self, p_tInput):\n","        self.Input = p_tInput\n","\n","        # Feed forward to the next layer\n","        tA = p_tInput\n","        for nIndex, oHiddenLayer in enumerate(self.HiddenLayers):\n","            oNormalizationLayer = self.NormalizationLayers[nIndex]\n","            tA = oHiddenLayer(tA)\n","            tA = oNormalizationLayer(tA)\n","        if self.IsDroppingOut:\n","            tA = self.DropOutLayer(tA)\n","        tA = self.OutputLayer(tA)\n","        # Using the Softmax activation function for the neurons of the output layer\n","        if not self.IsRegression:\n","          tA = self.Classifier(tA)\n","\n","\n","        return tA\n","        # --------------------------------------------------------------------------------------\n","# ========================================================================================================================="],"metadata":{"id":"4ixFmLGGeJ6b","executionInfo":{"status":"ok","timestamp":1680009114953,"user_tz":-180,"elapsed":1522,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}}},"execution_count":118,"outputs":[]},{"cell_type":"code","source":["# __________ // Create the Machine Learning model and training algorithm objects \\\\ __________\n","sModelFolderName = CONFIG[\"ModelName\"]\n","nInitialLearningRate = CONFIG[\"Training.LearningRate\"]\n","\n","oDNN = CDNN(CONFIG)\n","\n","oCostFunction   = tf.keras.losses.BinaryCrossentropy(from_logits=False)  #tf.keras.losses.CategoricalCrossentropy(from_logits=False)\n","oOptimizer      = tf.keras.optimizers.SGD(learning_rate=nInitialLearningRate)"],"metadata":{"id":"GVQQoCXTeUDr","executionInfo":{"status":"ok","timestamp":1680009114954,"user_tz":-180,"elapsed":28,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}}},"execution_count":119,"outputs":[]},{"cell_type":"code","source":["nBatchSize = CONFIG[\"Training.BatchSize\"]\n","\n","# Creating one hot labels if the task is multiclass, or we have 2 software neurons for binary classification\n","#tTSTargets = tf.one_hot(oDataset.TSLabels, CONFIG[\"DNN.Classes\"])\n","#tVSTargets = tf.one_hot(oDataset.VSLabels, CONFIG[\"DNN.Classes\"])\n","\n","# Training data feed pipeline\n","oTSData = tf.data.Dataset.from_tensor_slices((oDataset.TSSamples, oDataset.TSLabels))\n","oTSData = oTSData.cache()\n","oTSData = oTSData.shuffle(oDataset.TSSampleCount)\n","oTSData = oTSData.batch(nBatchSize)\n","print(\"Training data object:\", oTSData)\n","\n","# Validation data feed pipeline\n","oVSData = tf.data.Dataset.from_tensor_slices((oDataset.VSSamples, oDataset.VSLabels))\n","oVSData = oVSData.batch(oDataset.VSSampleCount)\n","print(\"Validation data object:\", oVSData)"],"metadata":{"id":"JddMI7QneYed","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680009114955,"user_tz":-180,"elapsed":27,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"e56878b5-bbb4-4412-c54f-01643659610c"},"execution_count":120,"outputs":[{"output_type":"stream","name":"stdout","text":["Training data object: <BatchDataset element_spec=(TensorSpec(shape=(None, 20), dtype=tf.float64, name=None), TensorSpec(shape=(None,), dtype=tf.float64, name=None))>\n","Validation data object: <BatchDataset element_spec=(TensorSpec(shape=(None, 20), dtype=tf.float64, name=None), TensorSpec(shape=(None,), dtype=tf.float64, name=None))>\n"]}]},{"cell_type":"code","source":["if (not os.path.isdir(sModelFolderName)) or IS_RETRAINING:\n","    oDNN.compile(loss=oCostFunction, optimizer=oOptimizer, metrics=[\"accuracy\"])\n","    oProcessLog = oDNN.fit(  oTSData, batch_size=CONFIG[\"Training.BatchSize\"]\n","                            ,epochs=CONFIG[\"Training.MaxEpoch\"]\n","                            ,validation_data=oVSData\n","                            ,class_weight={0: 1 , 1: 1000}\n","                          )\n","    oDNN.save(sModelFolderName)      \n","else:\n","    # The model is trained and its state is saved (all the trainable parameters are saved). We load the model to recall the samples \n","    oDNN = keras.models.load_model(sModelFolderName)\n","    oProcessLog = None\n","oDNN.summary()    "],"metadata":{"id":"4ozjq3lTecxM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680009299360,"user_tz":-180,"elapsed":77863,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"77675305-833c-4fac-c1e9-06cbbb1738de"},"execution_count":124,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/200\n","50/50 [==============================] - 7s 22ms/step - loss: 1.0479 - accuracy: 0.8594 - val_loss: 0.6050 - val_accuracy: 0.8600\n","Epoch 2/200\n","50/50 [==============================] - 0s 8ms/step - loss: 1.0062 - accuracy: 0.8594 - val_loss: 0.6080 - val_accuracy: 0.8619\n","Epoch 3/200\n","50/50 [==============================] - 1s 11ms/step - loss: 0.9140 - accuracy: 0.8596 - val_loss: 0.6059 - val_accuracy: 0.8637\n","Epoch 4/200\n","50/50 [==============================] - 0s 9ms/step - loss: 0.9294 - accuracy: 0.8574 - val_loss: 0.6080 - val_accuracy: 0.8669\n","Epoch 5/200\n","50/50 [==============================] - 0s 4ms/step - loss: 1.0068 - accuracy: 0.8582 - val_loss: 0.6344 - val_accuracy: 0.8562\n","Epoch 6/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.9037 - accuracy: 0.8588 - val_loss: 0.6302 - val_accuracy: 0.8587\n","Epoch 7/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.9673 - accuracy: 0.8574 - val_loss: 0.6297 - val_accuracy: 0.8612\n","Epoch 8/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.9390 - accuracy: 0.8613 - val_loss: 0.6310 - val_accuracy: 0.8619\n","Epoch 9/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8402 - accuracy: 0.8588 - val_loss: 0.6173 - val_accuracy: 0.8650\n","Epoch 10/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8882 - accuracy: 0.8662 - val_loss: 0.6145 - val_accuracy: 0.8662\n","Epoch 11/200\n","50/50 [==============================] - 0s 4ms/step - loss: 1.0002 - accuracy: 0.8655 - val_loss: 0.6568 - val_accuracy: 0.8631\n","Epoch 12/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8529 - accuracy: 0.8646 - val_loss: 0.6602 - val_accuracy: 0.8612\n","Epoch 13/200\n","50/50 [==============================] - 0s 3ms/step - loss: 0.8329 - accuracy: 0.8634 - val_loss: 0.6433 - val_accuracy: 0.8650\n","Epoch 14/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8277 - accuracy: 0.8655 - val_loss: 0.6321 - val_accuracy: 0.8675\n","Epoch 15/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8688 - accuracy: 0.8663 - val_loss: 0.6288 - val_accuracy: 0.8700\n","Epoch 16/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.9686 - accuracy: 0.8654 - val_loss: 0.6644 - val_accuracy: 0.8606\n","Epoch 17/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8632 - accuracy: 0.8634 - val_loss: 0.6541 - val_accuracy: 0.8625\n","Epoch 18/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8195 - accuracy: 0.8640 - val_loss: 0.6420 - val_accuracy: 0.8675\n","Epoch 19/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8372 - accuracy: 0.8648 - val_loss: 0.6291 - val_accuracy: 0.8681\n","Epoch 20/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.7884 - accuracy: 0.8674 - val_loss: 0.6171 - val_accuracy: 0.8712\n","Epoch 21/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.8356 - accuracy: 0.8655 - val_loss: 0.6110 - val_accuracy: 0.8712\n","Epoch 22/200\n","50/50 [==============================] - 0s 7ms/step - loss: 0.7519 - accuracy: 0.8723 - val_loss: 0.6008 - val_accuracy: 0.8750\n","Epoch 23/200\n","50/50 [==============================] - 0s 7ms/step - loss: 0.7845 - accuracy: 0.8740 - val_loss: 0.5957 - val_accuracy: 0.8744\n","Epoch 24/200\n","50/50 [==============================] - 0s 7ms/step - loss: 0.7436 - accuracy: 0.8740 - val_loss: 0.5942 - val_accuracy: 0.8744\n","Epoch 25/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7741 - accuracy: 0.8737 - val_loss: 0.5873 - val_accuracy: 0.8763\n","Epoch 26/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7916 - accuracy: 0.8770 - val_loss: 0.5932 - val_accuracy: 0.8750\n","Epoch 27/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7597 - accuracy: 0.8785 - val_loss: 0.5896 - val_accuracy: 0.8775\n","Epoch 28/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7908 - accuracy: 0.8785 - val_loss: 0.5870 - val_accuracy: 0.8775\n","Epoch 29/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7859 - accuracy: 0.8818 - val_loss: 0.5835 - val_accuracy: 0.8788\n","Epoch 30/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.7654 - accuracy: 0.8806 - val_loss: 0.5938 - val_accuracy: 0.8794\n","Epoch 31/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7605 - accuracy: 0.8823 - val_loss: 0.5860 - val_accuracy: 0.8800\n","Epoch 32/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7663 - accuracy: 0.8799 - val_loss: 0.5823 - val_accuracy: 0.8819\n","Epoch 33/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7493 - accuracy: 0.8815 - val_loss: 0.5800 - val_accuracy: 0.8813\n","Epoch 34/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7964 - accuracy: 0.8848 - val_loss: 0.5885 - val_accuracy: 0.8800\n","Epoch 35/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7972 - accuracy: 0.8795 - val_loss: 0.5923 - val_accuracy: 0.8806\n","Epoch 36/200\n","50/50 [==============================] - 0s 4ms/step - loss: 1.0553 - accuracy: 0.8787 - val_loss: 0.6937 - val_accuracy: 0.8669\n","Epoch 37/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.9738 - accuracy: 0.8709 - val_loss: 0.7383 - val_accuracy: 0.8581\n","Epoch 38/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7922 - accuracy: 0.8668 - val_loss: 0.6991 - val_accuracy: 0.8631\n","Epoch 39/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8321 - accuracy: 0.8732 - val_loss: 0.6774 - val_accuracy: 0.8681\n","Epoch 40/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8485 - accuracy: 0.8721 - val_loss: 0.6680 - val_accuracy: 0.8675\n","Epoch 41/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7948 - accuracy: 0.8724 - val_loss: 0.6531 - val_accuracy: 0.8694\n","Epoch 42/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7989 - accuracy: 0.8668 - val_loss: 0.6407 - val_accuracy: 0.8706\n","Epoch 43/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7530 - accuracy: 0.8763 - val_loss: 0.6288 - val_accuracy: 0.8737\n","Epoch 44/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.9276 - accuracy: 0.8754 - val_loss: 0.7082 - val_accuracy: 0.8612\n","Epoch 45/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8394 - accuracy: 0.8709 - val_loss: 0.6856 - val_accuracy: 0.8656\n","Epoch 46/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8356 - accuracy: 0.8671 - val_loss: 0.6640 - val_accuracy: 0.8706\n","Epoch 47/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8221 - accuracy: 0.8707 - val_loss: 0.6561 - val_accuracy: 0.8725\n","Epoch 48/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7715 - accuracy: 0.8701 - val_loss: 0.6356 - val_accuracy: 0.8756\n","Epoch 49/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7772 - accuracy: 0.8782 - val_loss: 0.6187 - val_accuracy: 0.8775\n","Epoch 50/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.7919 - accuracy: 0.8773 - val_loss: 0.6096 - val_accuracy: 0.8788\n","Epoch 51/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7696 - accuracy: 0.8791 - val_loss: 0.6020 - val_accuracy: 0.8788\n","Epoch 52/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7191 - accuracy: 0.8812 - val_loss: 0.5943 - val_accuracy: 0.8806\n","Epoch 53/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7438 - accuracy: 0.8815 - val_loss: 0.5929 - val_accuracy: 0.8806\n","Epoch 54/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7019 - accuracy: 0.8815 - val_loss: 0.5863 - val_accuracy: 0.8806\n","Epoch 55/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6786 - accuracy: 0.8859 - val_loss: 0.5801 - val_accuracy: 0.8819\n","Epoch 56/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7940 - accuracy: 0.8868 - val_loss: 0.6114 - val_accuracy: 0.8756\n","Epoch 57/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7569 - accuracy: 0.8834 - val_loss: 0.6011 - val_accuracy: 0.8806\n","Epoch 58/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7264 - accuracy: 0.8829 - val_loss: 0.5896 - val_accuracy: 0.8819\n","Epoch 59/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.7147 - accuracy: 0.8856 - val_loss: 0.5816 - val_accuracy: 0.8825\n","Epoch 60/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.7263 - accuracy: 0.8837 - val_loss: 0.5715 - val_accuracy: 0.8869\n","Epoch 61/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6505 - accuracy: 0.8902 - val_loss: 0.5618 - val_accuracy: 0.8863\n","Epoch 62/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.7111 - accuracy: 0.8887 - val_loss: 0.5688 - val_accuracy: 0.8863\n","Epoch 63/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.7626 - accuracy: 0.8934 - val_loss: 0.5791 - val_accuracy: 0.8856\n","Epoch 64/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6821 - accuracy: 0.8923 - val_loss: 0.5731 - val_accuracy: 0.8856\n","Epoch 65/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.7812 - accuracy: 0.8917 - val_loss: 0.5890 - val_accuracy: 0.8856\n","Epoch 66/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7625 - accuracy: 0.8871 - val_loss: 0.5893 - val_accuracy: 0.8813\n","Epoch 67/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7339 - accuracy: 0.8870 - val_loss: 0.5810 - val_accuracy: 0.8850\n","Epoch 68/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6418 - accuracy: 0.8943 - val_loss: 0.5713 - val_accuracy: 0.8881\n","Epoch 69/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7298 - accuracy: 0.8882 - val_loss: 0.5865 - val_accuracy: 0.8863\n","Epoch 70/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7152 - accuracy: 0.8859 - val_loss: 0.5833 - val_accuracy: 0.8869\n","Epoch 71/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6952 - accuracy: 0.8918 - val_loss: 0.5751 - val_accuracy: 0.8869\n","Epoch 72/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7655 - accuracy: 0.8891 - val_loss: 0.5951 - val_accuracy: 0.8850\n","Epoch 73/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6674 - accuracy: 0.8927 - val_loss: 0.5844 - val_accuracy: 0.8869\n","Epoch 74/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8987 - accuracy: 0.8846 - val_loss: 0.6399 - val_accuracy: 0.8838\n","Epoch 75/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7589 - accuracy: 0.8874 - val_loss: 0.6282 - val_accuracy: 0.8819\n","Epoch 76/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7192 - accuracy: 0.8868 - val_loss: 0.6117 - val_accuracy: 0.8844\n","Epoch 77/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7107 - accuracy: 0.8898 - val_loss: 0.6294 - val_accuracy: 0.8794\n","Epoch 78/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7156 - accuracy: 0.8862 - val_loss: 0.6089 - val_accuracy: 0.8850\n","Epoch 79/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7020 - accuracy: 0.8902 - val_loss: 0.6008 - val_accuracy: 0.8894\n","Epoch 80/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.9018 - accuracy: 0.8860 - val_loss: 0.6718 - val_accuracy: 0.8819\n","Epoch 81/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7617 - accuracy: 0.8874 - val_loss: 0.6439 - val_accuracy: 0.8825\n","Epoch 82/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6948 - accuracy: 0.8891 - val_loss: 0.6186 - val_accuracy: 0.8844\n","Epoch 83/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7145 - accuracy: 0.8884 - val_loss: 0.6076 - val_accuracy: 0.8856\n","Epoch 84/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6788 - accuracy: 0.8946 - val_loss: 0.6061 - val_accuracy: 0.8888\n","Epoch 85/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7255 - accuracy: 0.8902 - val_loss: 0.5963 - val_accuracy: 0.8888\n","Epoch 86/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7403 - accuracy: 0.8881 - val_loss: 0.6012 - val_accuracy: 0.8888\n","Epoch 87/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7109 - accuracy: 0.8893 - val_loss: 0.5884 - val_accuracy: 0.8925\n","Epoch 88/200\n","50/50 [==============================] - 0s 4ms/step - loss: 1.8831 - accuracy: 0.8870 - val_loss: 0.6724 - val_accuracy: 0.8819\n","Epoch 89/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7353 - accuracy: 0.8846 - val_loss: 0.6422 - val_accuracy: 0.8850\n","Epoch 90/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7446 - accuracy: 0.8856 - val_loss: 0.6371 - val_accuracy: 0.8856\n","Epoch 91/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8063 - accuracy: 0.8871 - val_loss: 0.6436 - val_accuracy: 0.8806\n","Epoch 92/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7555 - accuracy: 0.8824 - val_loss: 0.6470 - val_accuracy: 0.8831\n","Epoch 93/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7242 - accuracy: 0.8885 - val_loss: 0.6342 - val_accuracy: 0.8850\n","Epoch 94/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7099 - accuracy: 0.8866 - val_loss: 0.6278 - val_accuracy: 0.8856\n","Epoch 95/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7824 - accuracy: 0.8871 - val_loss: 0.6516 - val_accuracy: 0.8781\n","Epoch 96/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7490 - accuracy: 0.8856 - val_loss: 0.6275 - val_accuracy: 0.8806\n","Epoch 97/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.7375 - accuracy: 0.8834 - val_loss: 0.6176 - val_accuracy: 0.8819\n","Epoch 98/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.7041 - accuracy: 0.8859 - val_loss: 0.6037 - val_accuracy: 0.8856\n","Epoch 99/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6772 - accuracy: 0.8866 - val_loss: 0.5943 - val_accuracy: 0.8869\n","Epoch 100/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.7410 - accuracy: 0.8924 - val_loss: 0.5968 - val_accuracy: 0.8863\n","Epoch 101/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.7056 - accuracy: 0.8940 - val_loss: 0.5934 - val_accuracy: 0.8869\n","Epoch 102/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.7648 - accuracy: 0.8938 - val_loss: 0.6207 - val_accuracy: 0.8863\n","Epoch 103/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.7060 - accuracy: 0.8913 - val_loss: 0.6073 - val_accuracy: 0.8856\n","Epoch 104/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6593 - accuracy: 0.8940 - val_loss: 0.5978 - val_accuracy: 0.8850\n","Epoch 105/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.8967 - accuracy: 0.8882 - val_loss: 0.7142 - val_accuracy: 0.8731\n","Epoch 106/200\n","50/50 [==============================] - 0s 4ms/step - loss: 1.4293 - accuracy: 0.8735 - val_loss: 0.7941 - val_accuracy: 0.8619\n","Epoch 107/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.8225 - accuracy: 0.8694 - val_loss: 0.7274 - val_accuracy: 0.8644\n","Epoch 108/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8012 - accuracy: 0.8734 - val_loss: 0.6953 - val_accuracy: 0.8694\n","Epoch 109/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8132 - accuracy: 0.8718 - val_loss: 0.6641 - val_accuracy: 0.8725\n","Epoch 110/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8064 - accuracy: 0.8776 - val_loss: 0.6411 - val_accuracy: 0.8788\n","Epoch 111/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8446 - accuracy: 0.8790 - val_loss: 0.6476 - val_accuracy: 0.8788\n","Epoch 112/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7818 - accuracy: 0.8818 - val_loss: 0.6386 - val_accuracy: 0.8800\n","Epoch 113/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8423 - accuracy: 0.8760 - val_loss: 0.6406 - val_accuracy: 0.8819\n","Epoch 114/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7169 - accuracy: 0.8826 - val_loss: 0.6242 - val_accuracy: 0.8838\n","Epoch 115/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7817 - accuracy: 0.8826 - val_loss: 0.6341 - val_accuracy: 0.8800\n","Epoch 116/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6978 - accuracy: 0.8837 - val_loss: 0.6247 - val_accuracy: 0.8844\n","Epoch 117/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7548 - accuracy: 0.8835 - val_loss: 0.6171 - val_accuracy: 0.8856\n","Epoch 118/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7013 - accuracy: 0.8871 - val_loss: 0.6133 - val_accuracy: 0.8850\n","Epoch 119/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7588 - accuracy: 0.8849 - val_loss: 0.6232 - val_accuracy: 0.8850\n","Epoch 120/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7676 - accuracy: 0.8877 - val_loss: 0.6181 - val_accuracy: 0.8888\n","Epoch 121/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7260 - accuracy: 0.8873 - val_loss: 0.6106 - val_accuracy: 0.8888\n","Epoch 122/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.6997 - accuracy: 0.8924 - val_loss: 0.5969 - val_accuracy: 0.8900\n","Epoch 123/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6934 - accuracy: 0.8891 - val_loss: 0.5911 - val_accuracy: 0.8881\n","Epoch 124/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6496 - accuracy: 0.8931 - val_loss: 0.5818 - val_accuracy: 0.8900\n","Epoch 125/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6741 - accuracy: 0.8943 - val_loss: 0.5793 - val_accuracy: 0.8919\n","Epoch 126/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8657 - accuracy: 0.8902 - val_loss: 0.6069 - val_accuracy: 0.8875\n","Epoch 127/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6535 - accuracy: 0.8907 - val_loss: 0.5878 - val_accuracy: 0.8888\n","Epoch 128/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7139 - accuracy: 0.8884 - val_loss: 0.5792 - val_accuracy: 0.8888\n","Epoch 129/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7109 - accuracy: 0.8932 - val_loss: 0.5700 - val_accuracy: 0.8925\n","Epoch 130/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7742 - accuracy: 0.8890 - val_loss: 0.5996 - val_accuracy: 0.8875\n","Epoch 131/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6806 - accuracy: 0.8910 - val_loss: 0.5805 - val_accuracy: 0.8894\n","Epoch 132/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7174 - accuracy: 0.8946 - val_loss: 0.5655 - val_accuracy: 0.8938\n","Epoch 133/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6704 - accuracy: 0.8949 - val_loss: 0.5624 - val_accuracy: 0.8931\n","Epoch 134/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6685 - accuracy: 0.8959 - val_loss: 0.5617 - val_accuracy: 0.8950\n","Epoch 135/200\n","50/50 [==============================] - 0s 4ms/step - loss: 1.0451 - accuracy: 0.8946 - val_loss: 0.6583 - val_accuracy: 0.8875\n","Epoch 136/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7982 - accuracy: 0.8929 - val_loss: 0.6563 - val_accuracy: 0.8838\n","Epoch 137/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7392 - accuracy: 0.8899 - val_loss: 0.6465 - val_accuracy: 0.8863\n","Epoch 138/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7245 - accuracy: 0.8935 - val_loss: 0.6462 - val_accuracy: 0.8831\n","Epoch 139/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8720 - accuracy: 0.8837 - val_loss: 0.7052 - val_accuracy: 0.8744\n","Epoch 140/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8462 - accuracy: 0.8770 - val_loss: 0.7397 - val_accuracy: 0.8675\n","Epoch 141/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.8291 - accuracy: 0.8796 - val_loss: 0.7066 - val_accuracy: 0.8756\n","Epoch 142/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.9804 - accuracy: 0.8724 - val_loss: 0.7024 - val_accuracy: 0.8750\n","Epoch 143/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.8649 - accuracy: 0.8735 - val_loss: 0.6939 - val_accuracy: 0.8775\n","Epoch 144/200\n","50/50 [==============================] - 0s 7ms/step - loss: 0.8942 - accuracy: 0.8807 - val_loss: 0.6765 - val_accuracy: 0.8763\n","Epoch 145/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.7887 - accuracy: 0.8777 - val_loss: 0.6710 - val_accuracy: 0.8756\n","Epoch 146/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.7445 - accuracy: 0.8763 - val_loss: 0.6526 - val_accuracy: 0.8788\n","Epoch 147/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.8014 - accuracy: 0.8795 - val_loss: 0.6608 - val_accuracy: 0.8769\n","Epoch 148/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7328 - accuracy: 0.8820 - val_loss: 0.6509 - val_accuracy: 0.8775\n","Epoch 149/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8430 - accuracy: 0.8824 - val_loss: 0.6941 - val_accuracy: 0.8737\n","Epoch 150/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7590 - accuracy: 0.8826 - val_loss: 0.7113 - val_accuracy: 0.8669\n","Epoch 151/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7313 - accuracy: 0.8782 - val_loss: 0.6805 - val_accuracy: 0.8750\n","Epoch 152/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7508 - accuracy: 0.8840 - val_loss: 0.7028 - val_accuracy: 0.8681\n","Epoch 153/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7643 - accuracy: 0.8816 - val_loss: 0.6870 - val_accuracy: 0.8725\n","Epoch 154/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7655 - accuracy: 0.8820 - val_loss: 0.6726 - val_accuracy: 0.8750\n","Epoch 155/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7177 - accuracy: 0.8874 - val_loss: 0.6492 - val_accuracy: 0.8819\n","Epoch 156/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7112 - accuracy: 0.8890 - val_loss: 0.6348 - val_accuracy: 0.8838\n","Epoch 157/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6828 - accuracy: 0.8870 - val_loss: 0.6254 - val_accuracy: 0.8869\n","Epoch 158/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6792 - accuracy: 0.8899 - val_loss: 0.6120 - val_accuracy: 0.8863\n","Epoch 159/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6912 - accuracy: 0.8949 - val_loss: 0.6200 - val_accuracy: 0.8856\n","Epoch 160/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7019 - accuracy: 0.8931 - val_loss: 0.6145 - val_accuracy: 0.8869\n","Epoch 161/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6671 - accuracy: 0.8970 - val_loss: 0.6084 - val_accuracy: 0.8869\n","Epoch 162/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6499 - accuracy: 0.8951 - val_loss: 0.5993 - val_accuracy: 0.8906\n","Epoch 163/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7033 - accuracy: 0.8999 - val_loss: 0.6539 - val_accuracy: 0.8800\n","Epoch 164/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.7422 - accuracy: 0.8898 - val_loss: 0.6376 - val_accuracy: 0.8844\n","Epoch 165/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8972 - accuracy: 0.8912 - val_loss: 0.7370 - val_accuracy: 0.8825\n","Epoch 166/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8688 - accuracy: 0.8843 - val_loss: 0.7953 - val_accuracy: 0.8675\n","Epoch 167/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8044 - accuracy: 0.8813 - val_loss: 0.7102 - val_accuracy: 0.8731\n","Epoch 168/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7212 - accuracy: 0.8868 - val_loss: 0.6634 - val_accuracy: 0.8769\n","Epoch 169/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.8489 - accuracy: 0.8837 - val_loss: 0.6516 - val_accuracy: 0.8763\n","Epoch 170/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7252 - accuracy: 0.8832 - val_loss: 0.6272 - val_accuracy: 0.8850\n","Epoch 171/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7407 - accuracy: 0.8841 - val_loss: 0.6142 - val_accuracy: 0.8844\n","Epoch 172/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7337 - accuracy: 0.8882 - val_loss: 0.5988 - val_accuracy: 0.8894\n","Epoch 173/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.7079 - accuracy: 0.8898 - val_loss: 0.5953 - val_accuracy: 0.8906\n","Epoch 174/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6971 - accuracy: 0.8898 - val_loss: 0.5898 - val_accuracy: 0.8913\n","Epoch 175/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.7077 - accuracy: 0.8881 - val_loss: 0.5929 - val_accuracy: 0.8913\n","Epoch 176/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.6738 - accuracy: 0.8940 - val_loss: 0.5874 - val_accuracy: 0.8919\n","Epoch 177/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7025 - accuracy: 0.8935 - val_loss: 0.5818 - val_accuracy: 0.8931\n","Epoch 178/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6810 - accuracy: 0.8946 - val_loss: 0.5747 - val_accuracy: 0.8956\n","Epoch 179/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6593 - accuracy: 0.8959 - val_loss: 0.5734 - val_accuracy: 0.8950\n","Epoch 180/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6756 - accuracy: 0.8957 - val_loss: 0.5771 - val_accuracy: 0.8944\n","Epoch 181/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6258 - accuracy: 0.8990 - val_loss: 0.5695 - val_accuracy: 0.8975\n","Epoch 182/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6424 - accuracy: 0.8974 - val_loss: 0.5657 - val_accuracy: 0.8969\n","Epoch 183/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.6927 - accuracy: 0.8977 - val_loss: 0.6084 - val_accuracy: 0.8881\n","Epoch 184/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.7287 - accuracy: 0.8896 - val_loss: 0.6054 - val_accuracy: 0.8869\n","Epoch 185/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.7377 - accuracy: 0.8937 - val_loss: 0.6137 - val_accuracy: 0.8931\n","Epoch 186/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6377 - accuracy: 0.9013 - val_loss: 0.5969 - val_accuracy: 0.8963\n","Epoch 187/200\n","50/50 [==============================] - 0s 8ms/step - loss: 0.6350 - accuracy: 0.8974 - val_loss: 0.5839 - val_accuracy: 0.8969\n","Epoch 188/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6640 - accuracy: 0.8990 - val_loss: 0.5759 - val_accuracy: 0.8981\n","Epoch 189/200\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6845 - accuracy: 0.9007 - val_loss: 0.5836 - val_accuracy: 0.8944\n","Epoch 190/200\n","50/50 [==============================] - 0s 6ms/step - loss: 1.2117 - accuracy: 0.9004 - val_loss: 0.6343 - val_accuracy: 0.8919\n","Epoch 191/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.6734 - accuracy: 0.8962 - val_loss: 0.6177 - val_accuracy: 0.8963\n","Epoch 192/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6717 - accuracy: 0.8982 - val_loss: 0.6082 - val_accuracy: 0.8969\n","Epoch 193/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.6312 - accuracy: 0.8992 - val_loss: 0.5943 - val_accuracy: 0.8981\n","Epoch 194/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.7265 - accuracy: 0.9010 - val_loss: 0.6292 - val_accuracy: 0.8881\n","Epoch 195/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6845 - accuracy: 0.8981 - val_loss: 0.6186 - val_accuracy: 0.8913\n","Epoch 196/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6675 - accuracy: 0.8970 - val_loss: 0.6046 - val_accuracy: 0.8944\n","Epoch 197/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6542 - accuracy: 0.8985 - val_loss: 0.5935 - val_accuracy: 0.8969\n","Epoch 198/200\n","50/50 [==============================] - 0s 5ms/step - loss: 0.6789 - accuracy: 0.8992 - val_loss: 0.5913 - val_accuracy: 0.8925\n","Epoch 199/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6480 - accuracy: 0.9001 - val_loss: 0.5839 - val_accuracy: 0.8956\n","Epoch 200/200\n","50/50 [==============================] - 0s 4ms/step - loss: 0.6650 - accuracy: 0.8982 - val_loss: 0.5860 - val_accuracy: 0.8931\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:Found untraced functions such as _update_step_xla while saving (showing 1 of 1). These functions will not be directly callable after loading.\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"cdnn\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               multiple                  672       \n","                                                                 \n"," dense_1 (Dense)             multiple                  1056      \n","                                                                 \n"," dense_2 (Dense)             multiple                  528       \n","                                                                 \n"," dense_3 (Dense)             multiple                  272       \n","                                                                 \n"," dense_4 (Dense)             multiple                  272       \n","                                                                 \n"," batch_normalization (BatchN  multiple                 128       \n"," ormalization)                                                   \n","                                                                 \n"," batch_normalization_1 (Batc  multiple                 128       \n"," hNormalization)                                                 \n","                                                                 \n"," batch_normalization_2 (Batc  multiple                 64        \n"," hNormalization)                                                 \n","                                                                 \n"," batch_normalization_3 (Batc  multiple                 64        \n"," hNormalization)                                                 \n","                                                                 \n"," batch_normalization_4 (Batc  multiple                 64        \n"," hNormalization)                                                 \n","                                                                 \n"," dropout (Dropout)           multiple                  0         \n","                                                                 \n"," dense_5 (Dense)             multiple                  17        \n","                                                                 \n"," activation (Activation)     multiple                  0         \n","                                                                 \n","=================================================================\n","Total params: 3,265\n","Trainable params: 3,041\n","Non-trainable params: 224\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["if oProcessLog is not None:\n","  oTrainingLogPlot = CPlotTrainingLogs(oProcessLog.history)\n","  oTrainingLogPlot.Show(\"DNN\", p_oCostFunction = oCostFunction)"],"metadata":{"id":"bH5VZE9XeoEB","colab":{"base_uri":"https://localhost:8080/","height":590},"executionInfo":{"status":"ok","timestamp":1680009299972,"user_tz":-180,"elapsed":638,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"6e55df9f-5607-444f-be1f-5ad2ea06cb5c"},"execution_count":125,"outputs":[{"output_type":"stream","name":"stdout","text":["Keys of training process log: dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["nPredictedValues = oDNN.predict(oDataset.VSSamples)\n","nPredictedClassLabels = []\n","for nValue in nPredictedValues:\n","  if nValue > 0.83:\n","    nPredictedClassLabels.append(1)\n","  else:\n","    nPredictedClassLabels.append(0)\n","\n","\n","nTargetClassLabels     = oDataset.VSLabels   \n","\n","# We create an evaluator object that will produce several metrics\n","oEvaluator = CEvaluator(nTargetClassLabels, nPredictedClassLabels)\n","oEvaluator.PrintConfusionMatrix()\n","print(\"Per Class Recall (Accuracy)  :\", oEvaluator.Recall)\n","print(\"Per Class Precision          :\", oEvaluator.Precision)\n","print(\"Average Accuracy: %.4f\" % oEvaluator.AverageRecall)\n","print(\"Average F1 Score: %.4f\" % oEvaluator.AverageF1Score)\n","\n","# We create a plot of the confusion matrix      \n","oConfusionMatrixPlot = CPlotConfusionMatrix(oEvaluator.ConfusionMatrix)\n","oConfusionMatrixPlot.Show()   "],"metadata":{"id":"C9rgGZT6eu8f","colab":{"base_uri":"https://localhost:8080/","height":675},"executionInfo":{"status":"ok","timestamp":1680009301599,"user_tz":-180,"elapsed":1641,"user":{"displayName":"Oni Luca","userId":"13743746246056329554"}},"outputId":"695afe75-4803-41f8-a813-4f614e151f34"},"execution_count":126,"outputs":[{"output_type":"stream","name":"stdout","text":["50/50 [==============================] - 0s 2ms/step\n","                    Predicted  \n","               ------------\n","        Actual | 1272  129 |\n","               |   23  176 |\n","               ------------\n","Per Class Recall (Accuracy)  : [0.90792291 0.88442211]\n","Per Class Precision          : [0.98223938 0.57704918]\n","Average Accuracy: 0.9050\n","Average F1 Score: 0.9131\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 540x540 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}